class ItemAssignmentsController < ApplicationController
 
  def index
    @header = ItemDisbursement.new
    session[:item_id] = []

    _init
    
    render :partial => 'index'
  end
 
  def ajax_list
    @headers = ItemDisbursement.find(:all)
  	@item_assignments = ItemRelease.find(:all)

  	render :update do |page|
			page.replace_html 'hlist', :partial => 'list' 
	  end
  end
    
  def ajax_new
  	@item_assignment =ItemRelease.new
	  @header = ItemDisbursement.new
    _init
  	render :update do |page|
		  page.replace_html 'hlist', :partial => 'index' 
	  end
  end
  
  def ajax_edit

   	@header = ItemDisbursement.find(params[:id])
  	_init
  	render :update do |page|
		  page.replace_html 'hlist', :partial => 'index' 
	  end
  end 
  
  # @params
  # header, items, search
  def ajax_create
    @assign_items = params[:items]
    @disbursement = ItemDisbursement.new(params[:header])
    
    ItemDisbursement.transaction do
      if @disbursement.save
        # save items
        for assign_item in @assign_items
          
          item = ItemRelease.create :item_disbursement_id => @disbursement.id,
                                    :item_id => assign_item[:item_id],
                                    :qty => assign_item[:qty],
                                    :is_returnable => assign_item[:is_returnable],
                                    :released_at => Time.now
        
        end
      
      else
      end
    end
    
  end 
   
  def ajax_update
  	begin
  	    @item_assignment = ItemRelease.find(params[:id])

  	
		render :update do |page|
			if @item_assignment.update_attributes(params[:item_assignment])
				@item_assignments = ItemRelease.find(:all)
				page.replace_html 'list', :partial => 'list'
			else
	            page.replace_html 'message_area', error_messages_for(:item_assignment)
	       end
		end
    	rescue ActiveRecord::RecordNotFound => e
    	render :update do |page|
           page.replace_html 'message_area', "Record not found: #{params[:id]}"
        end
    end
  end
  
  def ajax_delete
  	@item_assignment = ItemDisbursement.find(params[:id])

    
    render :update do |page|
	  	if @item_assignment.destroy
	  		@headers = ItemDisbursement.find(:all)

	  		page.replace_html 'hlist', :partial => 'list'
	  	end
	end
  end
  
  def _init
  	@projects = Project.find(:all, :select => ['id, name'])
  	@users = User.find(:all, :select => ['id, name'], :conditions => { :is_admin => 0 })
  	@items = Item.all(:limit => 5)
  end
 
  # ajax item list
  def ajax_item_list
  	search = params[:search] if params[:search]
  	@items = Item.find(:all, :conditions => ['name LIKE ?', "%#{search}%"])
  	render :update do |page|
			page.replace_html 'item_list_table', :partial => 'item_list_table' 
	  end
  end
  
  def remove_assigned_item
    item_id =  params[:item_id]
    
    session[:item_id].delete(item_id)
    
    logger.debug(session[:item_id].inspect)
    
    render :update do |page|
      page << "$('#assigned_item_#{item_id}').remove()"
    end
    
  end
  
  def add_item
  	@item = Item.find(params[:id])
  	
  	if session[:item_id].include?(@item.id)
  	  
  	  # render error
  	  render :update do |page|
  	    page.replace_html 'message_area', "Item Already Added to the Project"
  		  page << "jQuery('#message_area').slideDown()"
  	  end
  	  
  	else  
      
      session[:item_id] << @item.id
      
    	render :update do |page|
    	  page << "jQuery('#message_area').slideUp()"
    		page.insert_html :bottom, 'assigned_item_row', 
    			"<tr id='assigned_item_#{@item.id}'>
  				<td>
  				    <b>#{@item.name}</b>
  				    <div class='ssub'>
    					    Brand: #{@item.brand.name if @item.brand}
    					</div>
  				</td>
  				<td align=center>#{@item.current_qty}</td>
  				<td align=center>
  					<input type='text' value='2' style='text-align: center;' size='1' name='items[][qty]' id='item_qty'>
  					<input type='hidden' value='#{@item.id}' name='items[][item_id]'>
  				</td>
  				<td align='center'>
  					<input type='checkbox' value='1' name='items[][is_returnable]' id='item_returnable_#{@item.id}' checked='checked' onClick='itemReturnable(#{@item.id})'>
  				</td>
  				<td>
  				  #{link_to_function image_tag('delete.png'), "remove_assigned_item(" + @item.id.to_s + ")"}
  				</td>
  			</tr>"
    	end
    end
  end
  
  def search_item
  	@search = params[:search]
  	@items = Item.find(:all, :conditions => ['name LIKE :value OR serial_number LIKE :value OR barcode LIKE :value', 
  	                                          { :value => "%#{@search}%" }], :limit => 5)

    render_update_page('item_list_table', 'item_list_table', {})
  end
  
end
